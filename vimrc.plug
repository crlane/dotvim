" Cameron Lane's .vimrc customization file
" Last change: 2017-07-04

" Plugins
call plug#begin('~/.vim/plugged')
    Plug 'airblade/vim-gitgutter'
    Plug 'alfredodeza/jacinto.vim'
    Plug 'cespare/vim-toml'
    Plug 'dbakker/vim-lint' " lints vimrc
    Plug 'edkolev/tmuxline.vim'
    Plug 'ekalinin/Dockerfile.vim'
    Plug 'fatih/vim-go', {'tag': '*' , 'do': ':GoInstallBinaries', 'for': 'go'}
    Plug 'flazz/vim-colorschemes'
    Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
    Plug 'junegunn/fzf.vim'
    Plug 'justmao945/vim-clang', {'for': ['c', 'cpp']}
    Plug 'lepture/vim-jinja'
    Plug 'mattn/gist-vim' | Plug 'mattn/webapi-vim' " dependencies are expressed like this
    Plug 'rust-lang/rust.vim', {'for': 'rust'}
    Plug 'Rykka/riv.vim', {'for': 'rst'}
    Plug 'tomtom/tcomment_vim'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-unimpaired'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'vim-pandoc/vim-pandoc', {'for': 'markdown'}
    Plug 'w0rp/ale'
call plug#end()

" Key Remappings
nnoremap <Space> <Nop>
let mapleader = "\<Space>"
inoremap jj <Esc>
nnoremap <silent> <C-h> :wincmd h<cr>
nnoremap <silent> <C-j> :wincmd j<cr>
nnoremap <silent> <C-k> :wincmd k<cr>
nnoremap <silent> <C-l> :wincmd l<cr>
map <silent> <Leader><Leader> :noh<cr>
nmap <Leader>u :diffput<cr>
nmap <Leader>g :diffget<cr>
xnoremap <Leader>y "*y
xnoremap <Leader>d "*d
nnoremap <Leader>p <F7>"+p<F7>
noremap <Leader>P <F7>"+P<F7>
noremap <Leader>v <F7>"*p<F7>
noremap <leader>v <f7>"*p<f7>
nnoremap <leader>tb :%s/#012/\r/ge<cr>
nnoremap <leader>ws :%s/\s\+$//e<cr>
nnoremap <C-p> :Files<cr>
nnoremap <leader>f :Find 

" Enable filetype plugins
filetype plugin on
filetype indent on

" useful for when you're working on your vimrc or using the -u option to load
" alternate vimrc
set nocompatible

" Appearance & Fonts
syntax enable                           " If using a dark background within the editing area and syntax highlighting
set background=dark                     " set a dark background
colorscheme solarized

" Also switch on highlighting the last used search pattern.
if &t_Co > 4 || has("gui_running")
    syntax on                           " Switch syntax highlighting on, when the terminal has colors
    set hlsearch                        " highlight when searching
    set guifont=Liberation_Mono_for_Powerline:h10 " if using gui, make sure powerline fonts are available
endif

" General Editor settings
set encoding=utf-8                      " always work with unicode files
set fileencoding=utf-8                  " always work with unicode files
set backspace=indent,eol,start          " allow backspacing over everything in insert mode
set history=50                          " keep 50 lines of command line history
set ruler                               " show the cursor position all the time
set showcmd                             " display incomplete commands
set incsearch                           " do incremental searching
set spell                               " check spelling by default.
set showmatch                           " Show matching brackets.
set incsearch                           " Incremental search
set autowrite                           " Automatically save before commands like :next and :make
set number                              " Enable line numbers by default
set tabstop=4 shiftwidth=4 expandtab    " prefer spaces over tabs
set laststatus=2                        " always show status bar (helpful for airline)
set pastetoggle=<F7>                    " set the pastetoggle to F7
set clipboard=unnamed                   " use systemclipboard

" FileType specific settings
au FileType python set colorcolumn=80   " add an 80 char bg highlight
" set 2 space tabs for the following filetypes
autocmd FileType ruby,haml,eruby,yaml,sass,cucumber,javascript,html set ai sw=2 sts=2 et
" highlight json as though it were JS
autocmd BufNewFile,BufRead *.json setlocal ft=javascript
" the following extensions should be treated like ruby
autocmd BufNewFile,BufRead {Gemfile,VagrantFile,*.pp} set ft=ruby
" cython files should be treated like python
autocmd BufNewFile,BufRead *.pyx setlocal ft=python
" Go uses tabs not spaces
autocmd FileType go setlocal noexpandtab
autocmd FileType go setlocal tabstop=4


" set persistent undo
if has('persistent_undo')
    set undodir=$HOME/.vim/undo
    set undolevels=10000
    set undofile
endif



" noremap <F5> :! pdflatex %<cr>
" noremap <F6> :! /usr/bin/perl %<cr>
" noremap <F7> :! python %<cr>
" noremap <F8> :! wc -c %<cr>

" Go vim specific bindings
au FileType go nmap <Leader>r <Plug>(go-run)
au FileType go nmap <Leader>b <Plug>(go-build)
au FileType go nmap <Leader>t <Plug>(go-test)
au FileType go nmap <Leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

" Plugin specific values

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_detect_iminsert = 1
let g:airline_powerline_fonts = 1
let g:airline_section_z = '%3l/%L:%2c'
" let g:airline#extensions#tmuxline#enabled = 0

" tmuxline
" let g:tmuxline_powerline_separators = 0

" vim-gist
let g:gist_post_private = 1
let g:gist_show_privates = 1
let g:gist_api_url = 'https://github.atl.pdrop.net/api/v3'
let g:gist_use_password_in_gitconfig = 0
let g:gist_clip_command = 'pbcopy'
let g:gist_curl_options= '-Lv'


" highlight trailing whitespace in any filetype
hi ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" format with goimports instead of gofmt
let g:go_fmt_command = "goimports"
let g:ale_python_flake8_executable = expand("flake8")
let g:ale_python_flake8_args="--ignore=E501"
let g:ale_fixers= {'python': ['remove_trailing_lines', 'trim_whitespace']}


" https://medium.com/@crashybang/supercharge-vim-with-fzf-and-ripgrep-d4661fc853d2
" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --glob "!node_modules/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

" format XML with gg=G
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
au FileType json setlocal equalprg=python\ -m\ json.tool
